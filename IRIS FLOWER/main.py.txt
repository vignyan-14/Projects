import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')
import joblib
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix
import seaborn as sns
import os
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix
import joblib
import os
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
dataset = pd.read_csv("iris.csv")
dataset
dataset.info()	
dataset.isnull().sum()

le=LabelEncoder()
dataset['Species']=le.fit_transform(dataset['Species'])
X= dataset.iloc[:,1:5]
X
y= dataset.iloc[:, -1]
y	 
# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

labels = ["Iris-setosa",
          "Iris-versicolor",
          "Iris-virginica"]

#defining global variables to store accuracy and other metrics
precision = []
recall = []
fscore = []
accuracy = []

#function to calculate various metrics such as accuracy, precision etc
def calculateMetrics(algorithm, predict, testY):
    testY = testY.astype('int')
    predict = predict.astype('int')
    p = precision_score(testY, predict,average='macro') * 100
    r = recall_score(testY, predict,average='macro') * 100
    f = f1_score(testY, predict,average='macro') * 100
    a = accuracy_score(testY,predict)*100 
    accuracy.append(a)
    precision.append(p)
    recall.append(r)
    fscore.append(f)
    print(algorithm+' Accuracy    : '+str(a))
    print(algorithm+' Precision   : '+str(p))
    print(algorithm+' Recall      : '+str(r))
    print(algorithm+' FSCORE      : '+str(f))
    report=classification_report(predict, testY,target_names=labels)
    print('\n',algorithm+" classification report\n",report)
    conf_matrix = confusion_matrix(testY, predict) 
    plt.figure(figsize =(5, 5)) 
    ax = sns.heatmap(conf_matrix, xticklabels = labels, yticklabels = labels, annot = True, cmap="Blues" ,fmt ="g");
    ax.set_ylim([0,len(labels)])
    plt.title(algorithm+" Confusion matrix") 
    plt.ylabel('True class') 
    plt.xlabel('Predicted class') 
    plt.show()


# Check if the pkl file exists
if os.path.exists('KNN_weights.pkl'):
    # Load the model from the pkl file
    classifier= joblib.load('KNN_weights.pkl')
    predict = classifier.predict(X_test)
    calculateMetrics("KNN Classifier", predict, y_test)
else:
    classifier = KNeighborsClassifier(weights='distance',algorithm='ball_tree',leaf_size=3,p=1,metric='minkowski',)
    # Train the classifier on the training data
    classifier.fit(X_train, y_train)
    # Make predictions on the test data
    predict=classifier.predict(X_test)
    # Save the model weights to a pkl file
    joblib.dump(classifier, 'KNN_weights.pkl')
    print("KNN classifier_model trained and model weights saved.")
    calculateMetrics("KNeighborsClassifier", predict, y_test)

# Check if the pkl file exists
if os.path.exists('LogisticRegression_weights.pkl'):
    # Load the model from the pkl file
    rf_classifier= joblib.load('LogisticRegression_weights.pkl')
    predict = rf_classifier.predict(X_test)
    calculateMetrics("LogisticRegression", predict, y_test)
else:
    clf = LogisticRegression()
    # Train the classifier on the training data
    clf.fit(X_train, y_train)
    # Make predictions on the test data
    predict=clf.predict(X_test)
    joblib.dump(clf, 'LogisticRegression_weights.pkl')
    print("LogisticRegression model trained and model weights saved.")
    calculateMetrics("LogisticRegression", predict, y_test)

#showing all algorithms performance values
columns = ["Algorithm Name","Precison","Recall","FScore","Accuracy"]
values = []
algorithm_names = ["KNeighborsClassifier", "LogisticRegression"]
for i in range(len(algorithm_names)):
    values.append([algorithm_names[i],precision[i],recall[i],fscore[i],accuracy[i]])
    
temp = pd.DataFrame(values,columns=columns)
temp

A="Iris-setosa"
B="Iris-versicolor"
C="Iris-virginica"

dataset = pd.read_csv(r"test.csv")
predict = clf.predict(dataset)
for i in range(len(predict)):
    if predict[i] == 0:
        print("{} :{} ".format(dataset.iloc[i,:],A))
    elif predict[i]== 1:
        print("{} :{} ".format(dataset.iloc[i, :],B))
    elif predict[i]== 2:
        print("{} :{} ".format(dataset.iloc[i, :],C))